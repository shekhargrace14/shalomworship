generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model song {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  content         String
  lines           Json?
  isChords        Boolean? @default(false)
  isTranslation   Boolean? @default(false)
  language        LanguageType? @default(en)
  version         VersionType? @default(version_3)
  key             String?
  bpm             String?
  time            String?
  tempo           TempoType?
  image           String?
  video           String?
  videoId         String?
  audio           String?
  color           String?
  // SEO
  slug            String
  keyword         String[]
  metaDescription String
  excerpt         String?

  view            Int
  like            Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  

  author   author? @relation(fields: [authorId], references: [id])
  authorId String? @db.ObjectId

  creator   artist? @relation(fields: [creatorId], references: [id])
  creatorId String? @db.ObjectId

  season   season? @relation(fields: [seasonId], references: [id])
  seasonId String? @db.ObjectId

  artist    SongArtist[] // Explicit relation
  genre     SongGenre[] // Explicit relation
  category  SongCategory[] // Explicit relation
  scripture SongScripture[] // Explicit relation
  album     SongAlbum[]
}


model artist {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  type      ArtistType? // <-- NEW: Enum to classify artist
  link      String?
  image     String?
  slug      String?
  color     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  season    season[]
  song      SongArtist[] // Explicit relation
  creator   song[]
}
model author {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  song      song[]
}
enum ArtistType {
  individual
  band
  label
  channel
}
enum VersionType {
  version_1
  version_2
  version_3
}
enum LanguageType {
  en
  hi
  ne
  pa
  ta
  te
  ur
  ml
  kn
}

enum TempoType {
  largo       // very slow
  adagio      // slow
  andante     // walking pace
  moderato    // medium
  allegro     // fast
  presto      // very fast
}
model genre {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  color     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  song      SongGenre[] // Explicit relation
}

model category {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  color     String?
  slug      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  song      SongCategory[] // Explicit relation
}

model scripture {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  slug      String?
  color     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  song      SongScripture[] // Explicit relation
}

model album {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  slug      String
  color     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  song      SongAlbum[]
}

model season {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  slug      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  artist    artist   @relation(fields: [artistId], references: [id])
  artistId  String   @db.ObjectId
  song      song[]
}

// Intermediate table for SongArtist many-to-many
model SongArtist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  songId    String   @db.ObjectId
  artistId  String   @db.ObjectId
  isCreator Boolean? @default(false)
  isArtist  Boolean? @default(true)
  song      song     @relation(fields: [songId], references: [id])
  artist    artist   @relation(fields: [artistId], references: [id])
}

// Intermediate table for song-genre many-to-many
model SongGenre {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  songId  String @db.ObjectId
  genreId String @db.ObjectId
  song    song   @relation(fields: [songId], references: [id])
  genre   genre  @relation(fields: [genreId], references: [id])
}

// Intermediate table SongCategory many-to-many
model SongCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  songId     String   @db.ObjectId
  categoryId String   @db.ObjectId
  song       song     @relation(fields: [songId], references: [id])
  category   category @relation(fields: [categoryId], references: [id])
}

// Intermediate table for SongScripture many-to-many
model SongScripture {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  songId      String    @db.ObjectId
  scriptureId String    @db.ObjectId
  song        song      @relation(fields: [songId], references: [id])
  scripture   scripture @relation(fields: [scriptureId], references: [id])
}

model SongAlbum {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  songId  String @db.ObjectId
  albumId String @db.ObjectId
  song    song   @relation(fields: [songId], references: [id])
  album   album  @relation(fields: [albumId], references: [id])
}

// model SongSeason {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   songId   String @db.ObjectId
//   seasonId String @db.ObjectId
//   song     song   @relation(fields: [songId], references: [id])
//   season   season @relation(fields: [seasonId], references: [id])
// }
